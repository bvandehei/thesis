There are 3 different programs here:
Add java-json.jar to your path to compile and run each of the following.

PercentBugsWithAV
-This program searches all Apache Jira projects and generates a list of the number of total closed bugs, the number of closed bugs that have a list of affect versions, and the percent of closed bugs with affect versions. 
-No input is required
-Outfile goes to datasets.csv
-I opened datasets.csv in excel and ordered by the percent, this new file is saved as orderedDatasets.csv

GetReleasesWithOutDateInfo
-This program accepts a csv with a list of project names in the first column
-The projects.csv is an example input, however the datasets and orderedDatasets would work as fine input too
-This program calculates the following fields for each project:
  * total number of releases for each project
  * the number of releases that are missing a release date
  * the percent of releases missing a release date
  * a list of names of releases missing a release date
  * a list of the next index of a release with a release date for each release missing a date
     - I thought this field useful since it is assumed releases are in order by release date in the API, so using this I can see where the missing release dates are
-The output file is called ReleasesWithOutDatesInfo.csv

RQ2
-This program is my progress to RQ2
-This program does a project at a time, so change the project name in the main function to calculate the information for each project
-Currently, the program maps release dates to an index
-It currently ignores releases with missing dates
-Next, it creates a csv file with a list of bugs including the following information:
  * Bug ID
  * The index of the release for which the bug's ticket was created
    - calculated by getting the release for which the creation date is after the release date
  * the index of the release for which the bug's ticket was resolved
    - calculated by getting the release for which the resoltuion date is after the release date
  * the list of indexes of the affect versions recorded in the API
  * a list of assumed affect versions calculated by finding the affect version with the earliest release date and taking all releases (only ones with dates) from the earliest affect version to the resolution date
  * a list of recorded affect version's names that are missing dates 
